
material-color = lighten(black, 30%)

@import 'nib'
@import 'stylus-platonic'
@import 'global'

global-reset()

@keyframes opacity_glitch
	0%
		opacity : .4
	36%
		opacity : 0.6
	56%
		opacity : 0.9
	100%
		opacity : .3

face-glitch(duration = 1s, delay = 0s)
	animation-name            : opacity_glitch
	animation-duration        : duration
	animation-delay           : delay
	animation-iteration-count : 1
	animation-timing-function : ease

transition-in(duration)
	opacity    : 0
	transition : opacity duration ease

	&.in
		opacity : 1

pulse()
	

audio
	absolute   top 0 left 0
	z-index  : 10 

.platonic-viewport 

	.scene

		.group

			&#dodecahedron

				transition-in(2.1s)

				// Glitch animation of the faces
				&.glitch

					for i in 0 ... 12
						
						index = floor(random-range(0, 12))
						
						.face[data-face-id={'"%s"' % index}]

							duration = random-range(0, 1)
							duration = '%ss' % duration 

							delay = random-range(0, .8)
							delay = '%ss' % delay 

							face-glitch(duration, delay)

			&#hexahedron
				transition-in(3s)

			&#octahedron
				transition-in(1s)

			&#tetrahedron
				transition-in(3.2s)
			

		.mesh

			&.dodecahedron

				_color = lighten(black, 30%)

				dodecahedron(300px, color: _color, mesh-id: 0)

				spin(30s)

				.face
					opacity: .35

			&.cube
				_color = lighten(black, 20%)
				_size  = 350px

				cube(_size, _size, _size, color: _color, mesh-id: 1)

				spin(25s)

				.face
					opacity: .2

			&.tetrahedron

				_color = lighten(black, 30%)

				tetrahedron(300px, color: _color, mesh-id: 2)

				spin(22s)

				.face
					opacity: .35

			&.octahedron

				_color = lighten(black, 50%)

				octahedron(500px, color: _color, mesh-id: 3)

				spin(20s)

				.face
					opacity: .2

			&.icosahedron

				_color = lighten(black, 50%)

				icosahedron(150px, translate-x: 0, color: _color, mesh-id: 4)

				spin(20s)

				.face
					opacity: .2
