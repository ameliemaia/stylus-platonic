
material-color = lighten(black, 30%)

@import 'nib'
@import 'stylus-platonic'
@import 'global'

vendors = webkit

NUM_PARTICLES         = 80
NUM_PARTICLES_SETS    = 2
MAX_PARTICLE_SIZE     = 5px
MAX_PARTICLE_DURATION = 10
PARTICLE_ANIMATIONS   = 3


particle-wave-animation(duration)
	
	animation_name = floor(random-range(0, PARTICLE_ANIMATIONS))
	animation_name = 'particle-wave-%s' % animation_name 

	animation-name 			  : animation_name
	animation-duration 		  : duration
	animation-iteration-count : infinite
	animation-easing-function : easeInOutQuad

get-particle-vector(scalar, value)
	v = value * scalar
	transform : translate3d(v, v, v)

.test
	get-particle-vector(0px, 0)

@keyframes particle-wave-0
	0%
		get-particle-vector(0px, 0)
	50%
		get-particle-vector(100px, 2)
	100%
		get-particle-vector(0px, 0)

@keyframes particle-wave-1
	0%
		get-particle-vector(20px, 2)
	50%
		get-particle-vector(80px, 2)
	100%
		get-particle-vector(20px, 2)

@keyframes particle-wave-2
	0%
		get-particle-vector(5px, 2)
	50%
		get-particle-vector(110px, 2)
	100%
		get-particle-vector(5px, 2)


.platonic-viewport 

	.scene

		.mesh

			&.particles

				for i in 0 ... NUM_PARTICLES_SETS

					&[data-mesh-id={'"%s"' % i}]

						duration = random-range(10, 20)
						duration = '%ss' % duration

						spin(duration)

						for j in 0 .. NUM_PARTICLES

							.group[data-group-id={'"%s"' % j}]	

								// group

								radius = 200

								theta1 = random-range(0, TWO_PI)
								theta2 = random-range(0, TWO_PI)
								theta3 = random-range(0, TWO_PI)

								rx = cos(TWO_PI / theta1)
								ry = sin(TWO_PI / theta2)
								rz = sin(TWO_PI / theta3)

								gx = unit(0, px)
								gy = unit(0, px)
								gz = unit(0, px)
								
								rx = unit(radius * rx, deg)
								ry = unit(radius * ry, deg)
								rz = unit(radius * rz, deg)

								set-transform(gx, gy, gz, rx, ry, rz)

								// Particle

								x = 0
								y = 0
								z = 0

								_color_pct = random-range(.1, 1)

								_color_val = (_color_pct * 100) + 1%
								_color     = darken(white, _color_val)

								_particle_size = particle-size + (MAX_PARTICLE_SIZE * _color_pct)

								particle(_particle_size, x, y, z, color: _color, particle-id: j)

								// Duration is based from color

								duration = _color_pct * MAX_PARTICLE_DURATION
								duration = '%ss' % duration

								.particle
									particle-wave-animation(duration)