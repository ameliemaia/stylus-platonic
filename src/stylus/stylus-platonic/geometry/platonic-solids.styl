
/*
 * Generates an dodecahedron
 *
 * @param radius
 * @param translate-x
 * @param translate-y
 * @param translate-z
 * @param rotate-x
 * @param rotate-y
 * @param rotate-z
 * @param color
 * @param mesh-id
 * @api   public
 */

dodecahedron(radius = 100px, translate-x = 0, translate-y = 0, translate-z = 0, rotate-x = 0deg, rotate-y = 0deg, rotate-z = 0deg, color = material-color, mesh-id = 0)
    
    radius           = remove-unit(radius)
    side_length      = 4 * radius / (sqrt(3) * (1 + sqrt(5)))
    face_radius      = polygon-radius(5, side_length)
    face_width       = unit(pentagon-width(face_radius), px)
    face_height      = unit(pentagon-height(face_radius), px)
    face_center_x    = face_width / 2
    face_center_y    = face_height / 2
    face_radius      = unit(face_radius, px)

    // Difference between the diameter of the circum circle and the pentagon width
    difference       = (face_radius * 2) - face_width
    dihedral_angle   = PI - (PI - atan(2))
    face_angle       = HALF_PI  - dihedral_angle
    face_angle       = unit(degrees(face_angle), deg)

    // Calculate the distance between the top and bottom faces
    dodecahedron_height = 2 * sqrt((radius * radius) - (face_radius * face_radius))
    dodecahedron_height = unit(dodecahedron_height, px) 

    &[data-mesh-id={'"%s"' % mesh-id}]  

        set-transform(translate-x, translate-y, translate-z, rotate-x, rotate-y, rotate-z)

        .face[data-face-id="0"]
            pentagon(face_radius, rotate-x: 90deg, rotate-z: 90deg)

        .face[data-face-id="11"]
            pentagon(face_radius, translate-y: -(dodecahedron_height), translate-x: -(difference * 2), rotate-x: 90deg, rotate-z: -90deg)

        // Bottom faces

        theta = TWO_PI / 5

        for i in 0 .. 4

            angle      = i * theta
            angle_next = angle + theta

            x = face_radius * cos(angle)
            y = 0
            z = face_radius * sin(angle)

            nx = face_radius * cos(angle_next)            
            nz = face_radius * sin(angle_next)

            x  -= difference
            nx -= difference

            cx = center-between(x, nx)
            cz = center-between(z, nz)
            cz = 0 if degrees(angle_next) is 216 // Fixes sin(216) -2.4492127076447545e-16

            index = i + 1

            .group[data-group-id={'"%s"' % index}]

                rotation_y = 54 - degrees(angle)
                rotation_y = unit(rotation_y, deg) 

                transform : translateX(cx) translateY(-(face_center_y)) translateZ(cz) rotateY(rotation_y)

                .face[data-face-id={'"%s"' % index}]
                    pentagon(face_radius, rotate-x: -(face_angle))
                    transform-origin : 50% 100%

        for i in 0 .. 4

            index = 6 + i

            angle  = i * theta
            angle -= PI
            angle_next = angle + theta

            x = face_radius * cos(angle)
            y = 0
            z = face_radius * sin(angle)
            z = 0 if degrees(angle) is 540 // Fixes sin(540) 3.673819061467132e-16

            nx = face_radius * cos(angle_next)            
            nz = face_radius * sin(angle_next)

            x  -= difference
            nx -= difference

            cx = center-between(x, nx)
            cz = center-between(z, nz)

            .group[data-group-id={'"%s"' % index}]

                translate_y = -(dodecahedron_height) - face_center_y
                rotation_y  = 54 - degrees(angle)
                rotation_y  = unit(rotation_y, deg) 

                transform : translateX(cx) translateY(translate_y) translateZ(cz) rotateY(rotation_y)

                .face[data-face-id={'"%s"' % index}]

                    rotate_x = -(PI - radians(remove-unit(face_angle)))
                    rotate_x = unit(degrees(rotate_x), deg)

                    pentagon(face_radius, rotate-x: rotate_x)
                    transform-origin : 50% 100%



/*
 * Generates an icosahedron
 *
 * @param radius
 * @param translate-x
 * @param translate-y
 * @param translate-z
 * @param rotate-x
 * @param rotate-y
 * @param rotate-z
 * @param color
 * @param mesh-id
 * @api   public
 */

icosahedron_rotate_x = 58deg
icosahedron_rotate_y = 72deg

icosahedron(radius = 100px, translate-x = 0, translate-y = 0, translate-z = 0, rotate-x = 0deg, rotate-y = 0deg, rotate-z = 0deg, color = material-color, mesh-id = 0)
    
    rotate-x += icosahedron_rotate_x
    rotate-y += icosahedron_rotate_y

    radius           = remove-unit(radius)
    side_length      = 4 * radius / (sqrt( 10 + 2 * sqrt(5)))

    // Height of the top pentagon pyramid
    pyramid_height   = sqrt((5 - sqrt(5)) / 10) * side_length
    
    // Hypotenuse from the center of the pentagon edge to the top apex
    pyramid_hypt     = triangle-height(side_length, 60)
    
    // Distance from the center to the pentagon base edge
    pyramid_opposite_a = sqrt((pyramid_hypt * pyramid_hypt) - (pyramid_height * pyramid_height))
    
    // Distance from a pentagon vertex to the top apex
    pyramid_opposite_b = sqrt((side_length * side_length) - (pyramid_height * pyramid_height))
    
    // Calculations for the face rotation of the middle triangles
    difference = pyramid_opposite_b - pyramid_opposite_a

    face_angle_top     = 90 - unit(degrees(asin(pyramid_height/pyramid_hypt)), deg)
    face_angle_middle  = unit(degrees(asin(difference/pyramid_hypt)), deg)

    radius             = unit(radius, px)
    side_length        = unit(side_length, px)
    pyramid_opposite_a = unit(pyramid_opposite_a, px)
    pyramid_height     = unit(pyramid_height, px)
    offset_y           = -(radius)

    &[data-mesh-id={'"%s"' % mesh-id}]

        set-transform(translate-x, translate-y, translate-z, rotate-x, rotate-y, rotate-z)

        // Top faces
        .face[data-face-id="0"]
        .face[data-face-id="1"]
        .face[data-face-id="2"]
        .face[data-face-id="3"]
        .face[data-face-id="4"]
            triangle(side_length, 60, color: color)
            center(0, side_length)
            transform-origin : 50% 0

        for i in 0 .. 5

            rotation_y = unit(i * (360 / 5), deg)
            
            .group[data-group-id={'"%s"' % i}]

                transform : translateY(offset_y) rotateY(rotation_y)

                .face[data-face-id={'"%s"' % i}]
                    transform : rotateX(face_angle_top)

        // Middle faces
        .face[data-face-id="5"]
        .face[data-face-id="7"]
        .face[data-face-id="9"]
        .face[data-face-id="11"]
        .face[data-face-id="13"]
            triangle(side_length, 60, color: color)
            transform-origin : 50% 100%
            center(0, side_length)

        .face[data-face-id="6"]
        .face[data-face-id="8"]
        .face[data-face-id="10"]
        .face[data-face-id="12"]
        .face[data-face-id="14"]
            triangle(side-length, 60, color: color, direction: 'down')
            transform-origin : 50% 0
            center(0, side_length)

        for i in 0 .. 9

            index = 5 + i
            angle = 360 / 5

            rotation_y = unit(i * angle, deg)
            rotation_y = rotation_y - 36 if even(i)

            face_angle_middle_negative = 0 - face_angle_middle

            .group[data-group-id={'"%s"' % index}]

                transform : translateY(offset_y) rotateY(rotation_y)

                .face[data-face-id={'"%s"' % index}]
                    if even(i)
                        transform : translateZ(pyramid_opposite_a) translateY(pyramid_height) rotateX(face_angle_middle_negative)
                    else
                        transform : translateZ(pyramid_opposite_a) translateY(pyramid_height) rotateX(face_angle_middle)
                        

        // Bottom faces
        .face[data-face-id="15"]
        .face[data-face-id="16"]
        .face[data-face-id="17"]
        .face[data-face-id="18"]
        .face[data-face-id="19"]
            triangle(side_length, 60, color: color, direction: 'down')
            transform-origin : 0 100%
            center(0, side_length)

        for i in 0 .. 4

            index      = 15 + i
            rotation_y = unit(i * (360 / 5), deg)
        
            .group[data-group-id={'"%s"' % index}]
                
                transform : translateY(offset_y) rotateY(rotation_y)

                .face[data-face-id={'"%s"' % index}]
                    transform : translateY(pyramid_height*2) rotateX(face_angle_top)

        
/*
 * Generates an octahedron
 *
 * @param radius
 * @param translate-x
 * @param translate-y
 * @param translate-z
 * @param rotate-x
 * @param rotate-y
 * @param rotate-z
 * @param color
 * @param mesh-id
 * @api   public
 */

octahedron(radius = 200px, translate-x = 0, translate-y = 0, translate-z = 0, rotate-x = 0deg, rotate-y = 0deg, rotate-z = 0deg, color = material-color, mesh-id = 0)
    
    radius           = unit(radius, '')
    edge_length      = unit(floor(sqrt((radius * radius) / 2)), px)
    half_edge_length = edge_length / 2
    triangle_height  = triangle-height(edge_length, 60)
    face_rotation    = 90 - unit(degrees(acos(sqrt(3)/3)), deg)
    
    &[data-mesh-id={'"%s"' % mesh-id}]
        
        set-transform(translate-x, translate-y, translate-z, rotate-x, rotate-y, rotate-z)
        
        .face
            &[data-face-id="0"],
            &[data-face-id="1"],
            &[data-face-id="2"],
            &[data-face-id="3"],
            &[data-face-id="4"],
            &[data-face-id="5"],
            &[data-face-id="6"],
            &[data-face-id="7"]
                triangle(edge_length, 60, color: color)
                transform-origin : 50% 100%
                center(0, edge_length)
            
            // Top Back
            &[data-face-id="0"]
                transform : translate3d(0, -(triangle_height), half_edge_length) rotateX(face_rotation)
            
            // Top Front
            &[data-face-id="1"]
                transform : translate3d(half_edge_length, -(triangle_height), 0) rotateY(90deg) rotateX(face_rotation)
            
            // Top Left
            &[data-face-id="2"]
                transform : translate3d(-(half_edge_length), -(triangle_height), 0) rotateY(90deg) rotateX(-(face_rotation))
            
            // Top Right
            &[data-face-id="3"]
                transform : translate3d(0, -(triangle_height), -(half_edge_length)) rotateX(-(face_rotation))
            
            // Bottom Back
            &[data-face-id="4"]
                transform : translate3d(0, -(triangle_height), half_edge_length) rotateX(180 - face_rotation)
            
            // Bottom Front
            &[data-face-id="5"]
                transform : translate3d(half_edge_length, -(triangle_height), 0) rotateY(90deg) rotateX(180 - face_rotation)
            
            // Bottom Left
            &[data-face-id="6"]
                transform : translate3d(-(half_edge_length), -(triangle_height), 0) rotateY(90deg) rotateX(180 + face_rotation)
            
            // Bottom Right
            &[data-face-id="7"]
                transform : translate3d(0, -(triangle_height), -(half_edge_length)) rotateX(180 + face_rotation)


/*
 * Generates an tetrahedron
 *
 * @param radius
 * @param translate-x
 * @param translate-y
 * @param translate-z
 * @param rotate-x
 * @param rotate-y
 * @param rotate-z
 * @param color
 * @param mesh-id
 * @api   public
 */        

tetrahedron(radius = 100px, translate-x = 0, translate-y = 0, translate-z = 0, rotate-x = 0deg, rotate-y = 0deg, rotate-z = 0deg, color = material-color, mesh-id = 0)
    
    edge_length     = floor((4 * radius) / sqrt(6))
    height          = sqrt(6) / 3 * edge_length
    center_y        = height / 2
    triangle_height = triangle-height(edge_length, 60)
    face_rotation   = 90 - unit(degrees(acos(1/3)), deg)
    
    // Calculate the distance between the top and back vertices's on the z-axis for the bottom triangle's z offset
    adjacent_side_length = cos(acos(1/3)) * triangle_height
    height_difference    = triangle_height - height
    
    &[data-mesh-id={'"%s"' % mesh-id}]
        
        set-transform(translate-x, translate-y, translate-z, rotate-x, rotate-y, rotate-z)
        
        .face
            &[data-face-id="0"],
            &[data-face-id="1"],
            &[data-face-id="2"],
            &[data-face-id="3"]
                triangle(edge_length, 60, color: color)
                center(0, edge_length)
            
            &[data-face-id="1"],
            &[data-face-id="2"],
            &[data-face-id="3"]
                transform-origin : 50% 0
            
            // Bottom
            &[data-face-id="0"]
                transform-origin : 50% 100%
                transform : translate3d(0, -(height_difference) + -(center_y), -(adjacent_side_length)) rotateX(-90deg)
            
            // Back
            &[data-face-id="1"]
                transform : translate3d(0, -(center_y), 0) rotateX(-(face_rotation))
            
            // Left
            &[data-face-id="2"]
                transform : translate3d(0, -(center_y), 0) rotateY(120deg) rotateX(-(face_rotation))
            
            // Right
            &[data-face-id="3"]
                transform : translate3d(0, -(center_y), 0) rotateY(240deg) rotateX(-(face_rotation))
            


