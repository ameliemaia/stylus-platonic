
/*
 * Generates an octahedron
 *
 * @param radius
 * @param translate-x
 * @param translate-y
 * @param translate-z
 * @param rotate-x
 * @param rotate-y
 * @param rotate-z
 * @param color
 * @param mesh-id
 * @api   public
 */

octahedron(radius = 200px, translate-x = 0, translate-y = 0, translate-z = 0, rotate-x = 0deg, rotate-y = 0deg, rotate-z = 0deg, color = material-color, mesh-id = 0)
    
    radius           = unit(radius, '')
    edge_length      = unit(floor(sqrt((radius * radius) / 2)), px)
    half_edge_length = edge_length / 2
    triangle_height  = triangle-height(edge_length, 60)
    face_rotation    = 90 - unit(degrees(acos(sqrt(3)/3)), deg)
    
    &[data-mesh-id={'"%s"' % mesh-id}]
        
        set-transform(translate-x, translate-y, translate-z, rotate-x, rotate-y, rotate-z)
        
        .face
            &[data-face-id="0"],
            &[data-face-id="1"],
            &[data-face-id="2"],
            &[data-face-id="3"],
            &[data-face-id="4"],
            &[data-face-id="5"],
            &[data-face-id="6"],
            &[data-face-id="7"]
                triangle(edge_length, 60, color: color)
                transform-origin(50% 100%)
                center(0, edge_length)
            
            // Top Back
            &[data-face-id="0"]
                transform(translate3d(0, -(triangle_height), half_edge_length) rotateX(face_rotation))
            
            // Top Front
            &[data-face-id="1"]
                transform(translate3d(half_edge_length, -(triangle_height), 0) rotateY(90deg) rotateX(face_rotation))
            
            // Top Left
            &[data-face-id="2"]
                transform(translate3d(-(half_edge_length), -(triangle_height), 0) rotateY(90deg) rotateX(-(face_rotation)))
            
            // Top Right
            &[data-face-id="3"]
                transform(translate3d(0, -(triangle_height), -(half_edge_length)) rotateX(-(face_rotation)))
            
            // Bottom Back
            &[data-face-id="4"]
                transform(translate3d(0, -(triangle_height), half_edge_length) rotateX(180 - face_rotation))
            
            // Bottom Front
            &[data-face-id="5"]
                transform(translate3d(half_edge_length, -(triangle_height), 0) rotateY(90deg) rotateX(180 - face_rotation))
            
            // Bottom Left
            &[data-face-id="6"]
                transform(translate3d(-(half_edge_length), -(triangle_height), 0) rotateY(90deg) rotateX(180 + face_rotation))
            
            // Bottom Right
            &[data-face-id="7"]
                transform(translate3d(0, -(triangle_height), -(half_edge_length)) rotateX(180 + face_rotation))


/*
 * Generates an tetrahedron
 *
 * @param radius
 * @param translate-x
 * @param translate-y
 * @param translate-z
 * @param rotate-x
 * @param rotate-y
 * @param rotate-z
 * @param color
 * @param mesh-id
 * @api   public
 */        

tetrahedron(radius = 100px, translate-x = 0, translate-y = 0, translate-z = 0, rotate-x = 0deg, rotate-y = 0deg, rotate-z = 0deg, color = material-color, mesh-id = 0)
    
    edge_length     = floor((4 * radius) / sqrt(6))
    height          = sqrt(6) / 3 * edge_length
    center_y        = height / 2
    triangle_height = triangle-height(edge_length, 60)
    face_rotation   = 90 - unit(degrees(acos(1/3)), deg)
    // Calculate the distance between the top and back vertices's on the z-axis for the bottom triangle's z offset
    adjacent_side_length = cos(acos(1/3)) * triangle_height
    height_difference    = triangle_height - height
    
    &[data-mesh-id={'"%s"' % mesh-id}]
        
        set-transform(translate-x, translate-y, translate-z, rotate-x, rotate-y, rotate-z)
        
        .face
            &[data-face-id="0"],
            &[data-face-id="1"],
            &[data-face-id="2"],
            &[data-face-id="3"]
                triangle(edge_length, 60, color: color)
                center(0, edge_length)
            
            &[data-face-id="1"],
            &[data-face-id="2"],
            &[data-face-id="3"]
                transform-origin(50% 0)
            
            // Bottom
            &[data-face-id="0"]
                transform-origin(50% 100%)
                transform(translate3d(0, -(height_difference) + -(center_y), -(adjacent_side_length)) rotateX(-90deg))
            
            // Back
            &[data-face-id="1"]
                transform(translate3d(0, -(center_y), 0) rotateX(-(face_rotation)))
            
            // Left
            &[data-face-id="2"]
                transform(translate3d(0, -(center_y), 0) rotateY(120deg) rotateX(-(face_rotation)))
            
            // Right
            &[data-face-id="3"]
                transform(translate3d(0, -(center_y), 0) rotateY(240deg) rotateX(-(face_rotation)))
            


