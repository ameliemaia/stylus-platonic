
/*
 * Generates an dodecahedron
 *
 * @param radius
 * @param translate-x
 * @param translate-y
 * @param translate-z
 * @param rotate-x
 * @param rotate-y
 * @param rotate-z
 * @param color
 * @param mesh-id
 * @api   public
 */

dodecahedron(radius = 100px, translate-x = 0, translate-y = 0, translate-z = 0, rotate-x = 0deg, rotate-y = 0deg, rotate-z = 0deg, color = material-color, mesh-id = 0)
    
    &[data-mesh-id={'"%s"' % mesh-id}]

        set-transform(translate-x, translate-y, translate-z, rotate-x, rotate-y, rotate-z)

        .face[data-face-id="0"]
            pentagon(radius, rotate-x: 90deg, rotate-z: -90deg)



/*
 * Generates an icosahedron
 *
 * @param radius
 * @param translate-x
 * @param translate-y
 * @param translate-z
 * @param rotate-x
 * @param rotate-y
 * @param rotate-z
 * @param color
 * @param mesh-id
 * @api   public
 */

icosahedron_rotate_x = 58deg
icosahedron_rotate_y = 72deg

icosahedron(radius = 100px, translate-x = 0, translate-y = 0, translate-z = 0, rotate-x = 0deg, rotate-y = 0deg, rotate-z = 0deg, color = material-color, mesh-id = 0)
    
    rotate-x += icosahedron_rotate_x
    rotate-y += icosahedron_rotate_y

    radius           = unit(radius, '')
    side-length      = 4 * radius / sqrt( 10 + 2 * sqrt(5))

    // Height of the pentagonal pyramid
    pyramid_height   = sqrt((5 - sqrt(5)) / 10) * side-length
    
    // Hypotenuse from the center of the pentagon edge to the top apex
    pyramid_hypt     = triangle-height(side-length, 60)
    
    // Distance from the center to the pentagon base edge
    pyramid_opposite_a = sqrt((pyramid_hypt * pyramid_hypt) - (pyramid_height * pyramid_height))
    
    // Distance from a pentagon vertex to the top apex
    pyramid_opposite_b = sqrt((side-length * side-length) - (pyramid_height * pyramid_height))
    
    // Calculations for the face rotation of the middle triangles
    difference = pyramid_opposite_b - pyramid_opposite_a

    face_angle_top    = 90 - unit(degrees(asin(pyramid_height/pyramid_hypt)), deg)
    face_angle_middle = unit(degrees(asin(difference/pyramid_hypt)), deg)

    radius             = unit(radius, px)
    side-length        = unit(side-length, px)
    pyramid_opposite_a = unit(pyramid_opposite_a, px)
    pyramid_height     = unit(pyramid_height, px)
    offset_y           = -(radius)

    // p('radius              :' + radius)
    // p('side-length         :' + side-length)
    // p('face_angle_top      :' + face_angle_top)
    // p('face_angle_middle   :' + face_angle_middle)
    // p('pyramid_height      :' + pyramid_height)
    // p('pyramid_hypt        :' + pyramid_hypt)
    // p('pyramid_opposite_a  :' + pyramid_opposite_a)
    // p('pyramid_opposite_b  :' + pyramid_opposite_b)

    &[data-mesh-id={'"%s"' % mesh-id}]

        set-transform(translate-x, translate-y, translate-z, rotate-x, rotate-y, rotate-z)

        // Top faces
        .face[data-face-id="0"]
        .face[data-face-id="1"]
        .face[data-face-id="2"]
        .face[data-face-id="3"]
        .face[data-face-id="4"]
            triangle(side-length, 60, color: color)
            transform-origin(50% 0)
            center(0, side-length)

        for i in 0 .. 5

            rotation_y = unit(i * (360 / 5), deg)
            
            .group[data-group-id={'"%s"' % i}]

                transform : translateY(offset_y) rotateY(rotation_y)

                .face[data-face-id={'"%s"' % i}]
                    transform : rotateX(face_angle_top)

        // Middle faces
        .face[data-face-id="5"]
        .face[data-face-id="7"]
        .face[data-face-id="9"]
        .face[data-face-id="11"]
        .face[data-face-id="13"]
            triangle(side-length, 60, color: color)
            transform-origin(50% 100%)
            center(0, side-length)

        .face[data-face-id="6"]
        .face[data-face-id="8"]
        .face[data-face-id="10"]
        .face[data-face-id="12"]
        .face[data-face-id="14"]
            triangle(side-length, 60, color: color, direction: 'down')
            transform-origin(50% 0)
            center(0, side-length)

        for i in 0 .. 9

            index = 5 + i
            angle = 360 / 5

            rotation_y = unit(i * angle, deg)
            rotation_y = rotation_y - 36 if even(i)

            face_angle_middle_negative = 0 - face_angle_middle

            .group[data-group-id={'"%s"' % index}]

                transform : translateY(offset_y) rotateY(rotation_y)

                .face[data-face-id={'"%s"' % index}]
                    if even(i)
                        transform : translateZ(pyramid_opposite_a) translateY(pyramid_height) rotateX(face_angle_middle_negative)
                    else
                        transform : translateZ(pyramid_opposite_a) translateY(pyramid_height) rotateX(face_angle_middle)
                        

        // Bottom faces
        .face[data-face-id="15"]
        .face[data-face-id="16"]
        .face[data-face-id="17"]
        .face[data-face-id="18"]
        .face[data-face-id="19"]
            triangle(side-length, 60, color: color, direction: 'down')
            transform-origin(0 100%)
            center(0, side-length)

        for i in 0 .. 4

            index      = 15 + i
            rotation_y = unit(i * (360 / 5), deg)
        
            .group[data-group-id={'"%s"' % index}]
                
                transform : translateY(offset_y) rotateY(rotation_y)

                .face[data-face-id={'"%s"' % index}]
                    transform : translateY(pyramid_height*2) rotateX(face_angle_top)

        
/*
 * Generates an octahedron
 *
 * @param radius
 * @param translate-x
 * @param translate-y
 * @param translate-z
 * @param rotate-x
 * @param rotate-y
 * @param rotate-z
 * @param color
 * @param mesh-id
 * @api   public
 */

octahedron(radius = 200px, translate-x = 0, translate-y = 0, translate-z = 0, rotate-x = 0deg, rotate-y = 0deg, rotate-z = 0deg, color = material-color, mesh-id = 0)
    
    radius           = unit(radius, '')
    edge_length      = unit(floor(sqrt((radius * radius) / 2)), px)
    half_edge_length = edge_length / 2
    triangle_height  = triangle-height(edge_length, 60)
    face_rotation    = 90 - unit(degrees(acos(sqrt(3)/3)), deg)
    
    &[data-mesh-id={'"%s"' % mesh-id}]
        
        set-transform(translate-x, translate-y, translate-z, rotate-x, rotate-y, rotate-z)
        
        .face
            &[data-face-id="0"],
            &[data-face-id="1"],
            &[data-face-id="2"],
            &[data-face-id="3"],
            &[data-face-id="4"],
            &[data-face-id="5"],
            &[data-face-id="6"],
            &[data-face-id="7"]
                triangle(edge_length, 60, color: color)
                transform-origin(50% 100%)
                center(0, edge_length)
            
            // Top Back
            &[data-face-id="0"]
                transform : translate3d(0, -(triangle_height), half_edge_length) rotateX(face_rotation)
            
            // Top Front
            &[data-face-id="1"]
                transform : translate3d(half_edge_length, -(triangle_height), 0) rotateY(90deg) rotateX(face_rotation)
            
            // Top Left
            &[data-face-id="2"]
                transform : translate3d(-(half_edge_length), -(triangle_height), 0) rotateY(90deg) rotateX(-(face_rotation))
            
            // Top Right
            &[data-face-id="3"]
                transform : translate3d(0, -(triangle_height), -(half_edge_length)) rotateX(-(face_rotation))
            
            // Bottom Back
            &[data-face-id="4"]
                transform : translate3d(0, -(triangle_height), half_edge_length) rotateX(180 - face_rotation)
            
            // Bottom Front
            &[data-face-id="5"]
                transform : translate3d(half_edge_length, -(triangle_height), 0) rotateY(90deg) rotateX(180 - face_rotation)
            
            // Bottom Left
            &[data-face-id="6"]
                transform : translate3d(-(half_edge_length), -(triangle_height), 0) rotateY(90deg) rotateX(180 + face_rotation)
            
            // Bottom Right
            &[data-face-id="7"]
                transform : translate3d(0, -(triangle_height), -(half_edge_length)) rotateX(180 + face_rotation)


/*
 * Generates an tetrahedron
 *
 * @param radius
 * @param translate-x
 * @param translate-y
 * @param translate-z
 * @param rotate-x
 * @param rotate-y
 * @param rotate-z
 * @param color
 * @param mesh-id
 * @api   public
 */        

tetrahedron(radius = 100px, translate-x = 0, translate-y = 0, translate-z = 0, rotate-x = 0deg, rotate-y = 0deg, rotate-z = 0deg, color = material-color, mesh-id = 0)
    
    edge_length     = floor((4 * radius) / sqrt(6))
    height          = sqrt(6) / 3 * edge_length
    center_y        = height / 2
    triangle_height = triangle-height(edge_length, 60)
    face_rotation   = 90 - unit(degrees(acos(1/3)), deg)
    
    // Calculate the distance between the top and back vertices's on the z-axis for the bottom triangle's z offset
    adjacent_side_length = cos(acos(1/3)) * triangle_height
    height_difference    = triangle_height - height
    
    &[data-mesh-id={'"%s"' % mesh-id}]
        
        set-transform(translate-x, translate-y, translate-z, rotate-x, rotate-y, rotate-z)
        
        .face
            &[data-face-id="0"],
            &[data-face-id="1"],
            &[data-face-id="2"],
            &[data-face-id="3"]
                triangle(edge_length, 60, color: color)
                center(0, edge_length)
            
            &[data-face-id="1"],
            &[data-face-id="2"],
            &[data-face-id="3"]
                transform-origin(50% 0)
            
            // Bottom
            &[data-face-id="0"]
                transform-origin(50% 100%)
                transform : translate3d(0, -(height_difference) + -(center_y), -(adjacent_side_length)) rotateX(-90deg)
            
            // Back
            &[data-face-id="1"]
                transform : translate3d(0, -(center_y), 0) rotateX(-(face_rotation))
            
            // Left
            &[data-face-id="2"]
                transform : translate3d(0, -(center_y), 0) rotateY(120deg) rotateX(-(face_rotation))
            
            // Right
            &[data-face-id="3"]
                transform : translate3d(0, -(center_y), 0) rotateY(240deg) rotateX(-(face_rotation))
            


